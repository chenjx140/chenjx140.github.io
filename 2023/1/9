347 Top K Frequent Elements
class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:

        L = dict()
        for i in nums:
            if i not in L.keys():
                L[i] = 1
            else:
                L[i] += 1
        
        print(L)

        import heapq

        min_heap = []

        for i,j in L.items():
            heapq.heappush(min_heap,(j,i))
            if len(min_heap) > k:
                heapq.heappop(min_heap)

        res = [0] * k
        for i in range(k):
            res[k-i-1] = heapq.heappop(min_heap)[1]

        return res 只有 minheap 才能维持最高k个
        
        239. Sliding Window Maximum
        from collections import deque
class MyQueue: 
    def __init__(self):
        self.queue = deque() 
    
    def pop(self, value):
        if self.queue and self.queue[0] == value:
            self.queue.popleft()
       
    
    def push(self, value):
        while self.queue and value > self.queue[-1]:
           
            self.queue.pop()
        self.queue.append(value)

        
        
   
    def front(self):
        return self.queue[0]
        

class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        que = MyQueue()
        res = []

        for i in range(0,k):
            que.push(nums[i])
        res.append(que.front())
        for i in range(k,len(nums)):
            que.pop(nums[i-k])
            que.push(nums[i])
            res.append(que.front())

        return res

