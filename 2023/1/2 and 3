454. 4Sum II

class Solution:
    def fourSumCount(self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]) -> int:
        L1 = dict()
        for i in nums1:
            for j in nums2:
                if i+j not in L1:
                    L1[i+j] = 1
                else:
                    L1[i+j] += 1
        res = 0
        for i in nums3:
            for j in nums4:
                if -(i+j) in L1:
                    res += L1[-(i+j)]
        return res
总结：只需要返回总数，不需要index，可以用dict直接搞。两个nested forloop 把4个list变2个，直接找-n就行。



383. Ransom Note
class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        let = dict()
        for i in ransomNote:
            if i not in let:
                let[i] = 1
            else:
                let[i] += 1
            
        for j in magazine:
            if j in let:
                let[j] -= 1
                if let[j] == 0:
                    del let[j]
        
        if len(let) != 0:
            return False
        return True
总结：没啥好说的

15.3Sum
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        res = []
        nums.sort() 
        for i in range(len(nums)):
            if nums[i] > 0:
                break # 排序之后如果第一个元素已经大于零，那么不可能凑成三元组
            if i>0 and nums[i] == nums[i-1]: # 三元组元素a去重
                continue
            left = i+1
            right = len(nums) - 1

            while left < right:
                K = nums[i] + nums[left] + nums[right]
                if K < 0:
                    left +=1
                elif K > 0:
                    right -= 1
                else:
                    res.append([nums[i], nums[left], nums[right]])
                    while left != right and nums[left] == nums[left + 1]: left += 1
                    while left != right and nums[right] == nums[right - 1]: right -= 1
                    left += 1
                    right -= 1
        return res
    
总结：再做一遍

18. 4Sum

class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        nums.sort()
        res = []
        for k in range(len(nums)):
            #剪枝
            if k>0 and nums[k] == nums[k-1]:
                continue
            if nums[k] >target and nums[k] > 0 :
                break
            for j in range(k+1, len(nums)):
                if (nums[k]+ nums[j]) >target and (nums[k]+ nums[j]) > 0 :
                    break
                if j>k+1 and nums[j] == nums[j-1]:
                    continue
                left = j+1
                right = len(nums) - 1
                while left < right:
                    total = nums[k] + nums[j] + nums[left] + nums[right]
                    if total > target:
                        right -= 1
                    elif total < target:
                        left += 1
                    else:
                        res.append([nums[k] , nums[j] , nums[left] , nums[right]])
                        while left != right and nums[left] == nums[left + 1]: left += 1
                        while left != right and nums[right] == nums[right - 1]: right -= 1
                        left += 1
                        right -= 1
        return res
        
 总结： 在3的基础上叠一下k在找一圈
 
 242. Valid Anagram 和383. Ransom Note 差不多
 class Solution(object):
    def isAnagram(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: bool
        """
        di = dict()
        for i in s:
            if i not in di:
                di[i] = 1
            else:
                di[i] += 1

        for j in t:
            if j not in di:
                return False
            di[j] -= 1
        
            if di[j] == 0:
                del di[j]

        if len(di) == 0:
            return True
        else:
            return False
   
   #349 Intersection of Two Arrays
   class Solution(object):
    def intersection(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """
        val_dict = {}
        ans = []
        for num in nums1:
            val_dict[num] = 1

        for num in nums2:
            if num in val_dict.keys() and val_dict[num] == 1:
                ans.append(num)
                val_dict[num] = 0
        
        return ans
   
   总结：用dictionary存，每次就设置 = 1 不累计，遇到相同的会覆盖一次，就不会有重复的问题
   
  
 
202. happy number

class Solution(object):
    def sum_f(self,n):
        res = 0
        x = n
        while x != 0:
            res += (x%10) **2
            x = x/10
        return res
    def isHappy(self, n):
        """
        :type n: int
        :rtype: bool
        """
        res = set()
        num = n

        while num != 1:
            num = self.sum_f(num)
            if num in res:
                return False
            res.add(num)

        return True
总结： 用set 存，因为search快

1. two sum
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        fd = dict() 
        for i in range(len(nums)):
            t = target - nums[i]
            if t in fd.keys():
                return [fd[t],i]
            else:
                fd[nums[i]] = i
                
 存完找-n


