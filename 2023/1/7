150. Evaluate Reverse Polish Notation

class Solution:
    def evalRPN(self, tokens: List[str]) -> int:
        stack = []
        operation = ["+","-","*","/"]
        for i in tokens:
            if i not in operation:
                stack.append(i)
            if i in operation:
                A = stack.pop()
                B = stack.pop()
                ans = int(eval(f'{B} {i} {A}'))
                stack.append(ans)
        return int(stack[0])

遇到符号 pop两个 eval(f'{B} {i} {A}') 

1047. Remove All Adjacent Duplicates In String
双指针 
class Solution:
    def removeDuplicates(self, s: str) -> str:
        L = list(s)
        slow = fast = 0

        for i in s:
            L[slow] = i

            if slow >0 and L[slow] == L[slow -1]:
                slow -= 1
            else:
                slow += 1
        return ''.join(L[0: slow])
        
        
 stack
 
 class Solution:
    def removeDuplicates(self, s: str) -> str:
        stack = []

        for i in s:
            if len(stack) != 0:
                if i == stack[-1]:
                    stack.pop()
                else:
                    stack.append(i)
            else:
                stack.append(i)
        return "".join(stack)
        
 20. Valid Parentheses
 
 
 
 
 class Solution:
    def isValid(self, s: str) -> bool:
        pairs = {'(':')', '{': '}', '[' : ']'}
        stack = []
        for i in s:
            if i in pairs.keys():
                stack.append(pairs[i])
            else:

                if len(stack) == 0 or i != stack.pop():
                    return False
                
        if len(stack) == 0:
            return True
        return False


