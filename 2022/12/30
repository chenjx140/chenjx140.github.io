#206 链表反转

暴力求解

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def reverseList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """

        l = []
        curr = head

        while curr is not None:
            l.append(curr.val)
            curr = curr.next
        
        he = ListNode(0)
        curr = he
        for j in range(len(l)-1,-1,-1):
            curr.next = ListNode(l[j])
            curr = curr.next
        return he.next
        
   #双指针- 让指针转向
   # Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def reverseList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """

        curr = head
        prev = None

        while curr:
            temp = curr.next
            curr.next = prev
            prev = curr
            curr = temp
        
        return prev
  
 203，remove linked list element
 
 # Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def removeElements(self, head, val):
        """
        :type head: ListNode
        :type val: int
        :rtype: ListNode
        """
        virtu = ListNode(0)
        virtu.next = head
        curr = head
        prev = virtu
        while curr:
            if curr.val == val:
                prev.next = curr.next
                curr = curr.next
            else:
                prev = curr
                curr = curr.next
        return virtu.next
   # 更简单写法，错一位就行     
   class Solution(object):
    def removeElements(self, head, val):
        """
        :type head: ListNode
        :type val: int
        :rtype: ListNode
        """
        dummy = ListNode(next = head)
        cur = dummy
        while (cur.next != None):
            if val == cur.next.val:
                cur.next = cur.next.next #删除cur.next节点
            else:
                cur = cur.next
        return dummy.next
        
 707 design linked list
 
 class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

class MyLinkedList:
    def __init__(self):
        self.size = 0
        self.head = ListNode(0)

    def get(self, index):
        """
        :type index: int
        :rtype: int
        """
        #index 可以等于0
        if index >= self.size or index < 0:
            return -1
        else:
            curr = self.head
            for i in range(index + 1):
                curr = curr.next
            return curr.val


    def addAtHead(self, val):
        """
        :type val: int
        :rtype: None
        """
        if self.head.next == None:
            self.head.next = ListNode(val)
        else:
            phead = self.head.next
            self.head.next = ListNode(val)
            self.head.next.next = phead
        self.size +=1
        #self.addAtIndex(0, val)

        

    def addAtTail(self, val):
        """
        :type val: int
        :rtype: None
        """
        curr = self.head
        for i in range(self.size):
            curr = curr.next
        curr.next = ListNode(val)
        
        self.size +=1

    def addAtIndex(self, index, val):
        """
        :type index: int
        :type val: int
        :rtype: None
        """
        # 可以等于，因为要加1
        if index > self.size or index < 0:
            return -1

        curr = self.head
        for _ in range(index):
            curr = curr.next

        n = curr.next
        current = ListNode(val)
        curr.next = current
        current.next = n
        self.size +=1

        

    def deleteAtIndex(self, index):
        """
        :type index: int
        :rtype: None
        """
        if index >= self.size or index < 0:
            return -1
        pred = self.head
        for _ in range(index):
            pred = pred.next
        pred.next = pred.next.next
        self.size -= 1
  #注意一下等于和小于，使用虚拟head可以直接call add 来做加头加尾
